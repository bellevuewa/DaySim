# azure-pipelines.yml
# Configuration file for building, running, and testing the RSGInc/DaySim model on RSG's
# local test server, operated by Azure Pipelines. DaySim is a .NET application that must be
# run on Windows x64 architecture and built with Visual Studio 2017 or above.
#
# Code for DaySim is hosted at https://github.com/RSGInc/DaySim
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- azure_build

pool: RSGLocal-Builds

# Test data to run:
#   testDir   - the directory to store the test data. this should be a persistent location
#     on the server to avoid pulling lots of test data for every run. Agent.HomeDirectory is not
#     wiped after every build, but Agent.BuildDirectory is, for example.
#   gitRepo   - the test data repository on GitHub.
#   config    - absolute path to the config file expected by DaySim.exe.
#   targets   - folder containing target output data.
strategy:
  maxParallel: 2
  matrix:
    sacog:
      testDir: $(Agent.HomeDirectory)\sacog_daysim_test
      gitRepo: RSGInc/sacog_daysim_test.git
      config: $(testDir)\daysim\sacog_regress.properties
      targets: $(testDir)\daysim\azure_target_output
    psrc:
      testDir: $(Agent.HomeDirectory)\psrc_daysim_test
      gitRepo: RSGInc/psrc_daysim_test.git
      config: $(testDir)\configuration_sp_regress.properties
      targets: $(testDir)\azure_target_output
    # # chattanooga fails because roster uses the transcad file-type
    # # which requires licensed software that is not installed for this machine
    # chattanooga:
    #   testDir: $(Agent.HomeDirectory)\chattanooga_daysim_test
    #   gitRepo: RSGInc/chattanooga_daysim_test.git
    #   config: $(testDir)\Config_regress.properties
    #   targets: $(testDir)\regress_outputs
    # dvrpc:
    #   testDir: $(Agent.HomeDirectory)\dvrpc_daysim_test
    #   gitRepo: RSGInc/dvrpc_daysim_test.git
    #   config: $(testDir)\dvrpc_regress.properties
    #   targets: $(testDir)\dvrpc_regress_output
    # sfcta:
    #   testDir: $(Agent.HomeDirectory)\sfcta_daysim_test
    #   gitRepo: RSGInc/sfcta_daysim_test.git
    #   config: $(testDir)\sfcta_apply_default_regress.properties
    #   targets: $(testDir)\sfcta_apply_default_regress_output
    # bkrcast:
    #   testDir: $(Agent.HomeDirectory)\bkrcast_daysim
    #   gitRepo: RSGInc/bkrcast_daysim.git
    #   config: $(testDir)\configuration_regress.properties
    #   targets: $(testDir)\outputs
    # jax:
    #   testDir: $(Agent.HomeDirectory)\jax_daysim_test
    #   gitRepo: RSGInc/jax_daysim_test.git
    #   config: $(testDir)\Configuration_regress.properties
    #   targets: $(testDir)\outputs

variables:
  solution: DaySim.sln
  buildPlatform: x64
  buildConfiguration: Release

  ### DaySim configuration runtime overrides ###
  householdSamplingRate: 10000
  nProcessors: 6
  outputDir: $(testDir)\azure_output
  overrides: HouseholdSamplingRateOneInX=$(householdSamplingRate),NProcessors=$(nProcessors),OutputSubpath=$(outputDir)

  ### Executables ###
  python: C:\ProgramData\Anaconda3\python.exe
  Rscript: C:\"Program Files"\R\R-3.4.3\bin\Rscript.exe

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: $(solution)

- task: VSBuild@1
  displayName: Build DaySim
  inputs:
    solution: $(solution)
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)

# # This step currently fails and is flagged at https://github.com/RSGInc/DaySim/issues/241
# - script: $(System.DefaultWorkingDirectory)\DaySim_dist\DaySim.exe --version
#   displayName: Print DaySim version

- script: $(System.DefaultWorkingDirectory)\DaySim_dist\DaySim.exe --help
  displayName: Print help text

# Use git lfs to pull entire data files, not just pointers
- task: PowerShell@2
  displayName: Get latest test data
  inputs:
    targetType: inline
    # failOnStderr: true
    script: |
      if ( !(Test-Path "$(testDir)") ) {
        git clone https://$(GH_TOKEN)@github.com/$(gitRepo) $(testDir)
      }
      cd $(testDir)
      git checkout .
      git clean -fd
      git pull
      git lfs pull

- script: |
    cd $(testDir)
    mkdir $(outputDir)
    $(System.DefaultWorkingDirectory)\DaySim_dist\DaySim.exe -c $(config) -o $(overrides)
  displayName: Run model

- task: PythonScript@0
  displayName: Compare output to target data
  continueOnError: true
  inputs:
    pythonInterpreter: $(python)
    scriptSource: filePath
    scriptPath: $(System.DefaultWorkingDirectory)\DaySim.Tests\DaySim.Tests.external\compare_output_directories\compare_output_directories.py
    arguments: --outputs_reference $(targets) --outputs_new $(outputDir) --verbose

- script: |
    cd $(System.DefaultWorkingDirectory)\DaySim.Tests\DaySim.Tests.external\DaysimSummaries_regress
    $(Rscript) main.R --reference_dir=$(targets) --outputs_dir=$(outputDir) --reports_dir=$(testDir)\excel_report_files
  displayName: Generate Excel reports
